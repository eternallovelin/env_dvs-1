/*
 * MyFreqFilter.java
 */


package net.sf.jaer.eventprocessing.filter;

import java.awt.Color;
import java.awt.Graphics2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;
import net.sf.jaer.Description;
import net.sf.jaer.DevelopmentStatus;
import net.sf.jaer.chip.AEChip;
import net.sf.jaer.chip.Chip2D;
import net.sf.jaer.event.EventPacket;
import net.sf.jaer.event.PolarityEvent;
import net.sf.jaer.eventprocessing.EventFilter2D;
import net.sf.jaer.graphics.FrameAnnotater;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.util.gl2.GLUT;

@Description("Measures the frequency of LED")
@DevelopmentStatus(DevelopmentStatus.Status.Experimental)
public class MyFreqFilter extends EventFilter2D implements Observer, FrameAnnotater {

	final int DEFAULT_TIMESTAMP = Integer.MIN_VALUE;

    private boolean filterInPlace=getBoolean("filterInPlace", true);

    
    private int pixelBufferLength = getPrefs().getInt("MyFreqFilter.pixelBufferLength", 32); 

    private float lowFrequencyRange  = getPrefs().getFloat("MyFreqFilter.lowFrequencyRange", (float) 0.0); 
    private float highFrequencyRange = getPrefs().getFloat("MyFreqFilter.highFrequencyRange", (float) 100000.0); 
    private int coloredPixelsAmount = getPrefs().getInt("MyFreqFilter.coloredPixelsAmount", 256);
    float timestampUnit = (float) 1.0e-6; 
    PrintStream writer; 
    Pixel[][] pixelsMap; 
    ringBuffer displayedPixelsX, displayedPixelsY; 
    ringBuffer timestampsOfDisplayedPixels ; 
    ringBuffer lastValidFrequencies ; 

    float[][] colorsTonesInRGB;

    public float getLowFrequencyRange() {
    	return this.lowFrequencyRange;
    }
    public void setLowFrequencyRange (final float value){
        float old = this.lowFrequencyRange;
    	this.lowFrequencyRange = value;
        getPrefs().putFloat("MyFreqFilter.lowFrequencyRange", value);
        getSupport().firePropertyChange("lowFrequencyRange", old, value);
    }

    public float getHighFrequencyRange() {
    	return this.highFrequencyRange;
    }
    public void setHighFrequencyRange (final float value){
        float old = this.highFrequencyRange;
    	this.highFrequencyRange = value;
        getPrefs().putFloat("MyFreqFilter.highFrequencyRange", value);
        getSupport().firePropertyChange("highFrequencyRange", old, value);
    }


    public MyFreqFilter(AEChip chip) {
        super(chip);
        chip.addObserver(this);
        initFilter();
        this.pixelsMap = new Pixel[chip.getSizeX()][chip.getSizeY()]; 
        resetFilter();

        setPropertyTooltip("lowFrequencyRange",  "Value (in Hz) of the lowest allowed frequency.");
        setPropertyTooltip("highFrequencyRange", "Value (in Hz) of the highest allowed frequency.");

        try { 
            writer = new PrintStream(new File("freq.txt"));
        } catch (FileNotFoundException e) {
        }

        resetFilter(); 

   }

    private void allocateObjects(AEChip chip) {
        if ((chip != null) && (chip.getNumCells() > 0)) {
        	this.pixelsMap = new Pixel[chip.getSizeX()][chip.getSizeY()];
        	this.displayedPixelsX = new ringBuffer(256);
        	this.displayedPixelsY = new ringBuffer(256);
        	this.timestampsOfDisplayedPixels = new ringBuffer(256);
        	this.lastValidFrequencies = new ringBuffer(256);
        	this.colorsTonesInRGB = new float[12][3]; 
        	resetFilter();
        }
    }
    private int ts = 0; 

    @Override
	synchronized public EventPacket filterPacket(EventPacket in) {

        if (pixelsMap == null) {
            allocateObjects(chip);
        }

        int sx = chip.getSizeX() - 1;
        int sy = chip.getSizeY() - 1;
        for (Object e : in) {
            if(e==null)
			 {
				break; 
			}
            PolarityEvent i = (PolarityEvent)e;
            if (i.special) {
				continue;
			}
            ts = i.timestamp;
            short x = (i.x);
            short y = (i.y);

            if ( ((x < 0) || (sx < x)) || ((y < 0) || (sy < y)) ) {
                continue;
            }

            int dt,dt00,dt01,dt02,dt10,dt12,dt21,dt20,dt22 = 0; 

             if (i.polarity == PolarityEvent.Polarity.Off) {

            	if (pixelsMap[x][y].otherPolarityOccurred == true) {

                	dt = ts - pixelsMap[x][y].lastTimestamp;

                	if (	(( dt*pixelsMap[x][y].pixelTimestampUnit) >  (1.0/pixelsMap[x][y].frequencyHighBoundary))
                		&&  (( dt*pixelsMap[x][y].pixelTimestampUnit) <  (1.0/pixelsMap[x][y].frequencyLowBoundary))) {

                		pixelsMap[x][y].measuredFrequencies.insertValue((float) (1.0/(dt*pixelsMap[x][y].pixelTimestampUnit)));
                       
                		this.displayedPixelsX.insertValue(x);
                		this.displayedPixelsY.insertValue(y);
                		this.timestampsOfDisplayedPixels.insertValue(ts);
                	}
                }


                pixelsMap[x][y].lastTimestamp = ts; //
                pixelsMap[x][y].otherPolarityOccurred = false;

            } 
            else {
            	pixelsMap[x][y].otherPolarityOccurred = true;
            }

        }

	return in; 
    }


    private final GLUT glutColorCode = new GLUT();


    public void annotate(float[][][] frame) {
    }

    public void annotate(Graphics2D g) {
    }

    @Override
    public void annotate(GLAutoDrawable drawable) {

        if(!isFilterEnabled())
		 {
			return; 
		}
        GL2 gl=drawable.getGL().getGL2();
        GL2 colorCodeGL = drawable.getGL().getGL2();
        GL2 lastEventsAvgGL = drawable.getGL().getGL2();

        if (gl == null) {
			return;
		}
        if (colorCodeGL == null) {
			return;
		}
        if (lastEventsAvgGL == null) {
			return;
		}

        float displayedAvg;
    	int displayAvgElemNumber;
    	int presumedToneCnt;
    	Octave presumedOctave;

        gl.glPointSize(4f);
        colorCodeGL.glPointSize(4f);
        lastEventsAvgGL.glPointSize(4f);
        try{
            gl.glBegin(GL.GL_POINTS);
            {
            	for (int cnt = 0; cnt < this.timestampsOfDisplayedPixels.bufferSize; cnt++){

                    int xCoordinate = (int) this.displayedPixelsX.get_bufferValues(cnt);
                    int yCoordinate = (int) this.displayedPixelsY.get_bufferValues(cnt);
                    pixelsMap[xCoordinate][yCoordinate].set_displayActive(true);
                    if (pixelsMap[xCoordinate][yCoordinate].get_displayActive() == true){ 

            			gl.glColor3f(pixelsMap[xCoordinate][yCoordinate].pixelRGB[0],
                        			 pixelsMap[xCoordinate][yCoordinate].pixelRGB[1],
                        			 pixelsMap[xCoordinate][yCoordinate].pixelRGB[2]);

                        gl.glVertex2i(xCoordinate, yCoordinate);
                        this.pixelsMap[xCoordinate][yCoordinate].set_displayActive(false); 
                    }
                }
            }
            gl.glEnd();

        } finally{
        }

        lastEventsAvgGL.glRasterPos3f(chip.getSizeX() + 15, chip.getSizeY() - 5, 0); 
       	lastEventsAvgGL.glColor3f((float) 0.2, (float) 0.2, (float) 0.2); 
        lastEventsAvgGL.glRasterPos3f(chip.getSizeX() + 15, chip.getSizeY() - 13, 0); 
        lastEventsAvgGL.glColor3f((float) 0.2, (float) 0.2, (float) 0.2); 


    }

    @Override
    synchronized public void resetFilter() {
        if (this.pixelsMap == null){
    		return;
    	}
    	this.pixelsMap = new Pixel[chip.getSizeX()][chip.getSizeY()]; 
    	for (int cnt1=0; cnt1 < chip.getSizeX(); cnt1++){
    		for (int cnt2=0; cnt2 < chip.getSizeY(); cnt2++){
    			this.pixelsMap[cnt1][cnt2] = new Pixel(this.pixelBufferLength, this.timestampUnit, this.lowFrequencyRange, this.highFrequencyRange);
    		}
    	}
    	this.displayedPixelsX.reset_bufferValues();
    	this.displayedPixelsY.reset_bufferValues();
    	this.timestampsOfDisplayedPixels.reset_bufferValues();
    	this.lastValidFrequencies.reset_bufferValues();


    	float[] toneHSB = new float[3];
    	Arrays.fill(toneHSB, (float) 1.0);
		Color tempColorObject;
    	int tempIntRGB = 0;
    	for (int tempCnt = 0; tempCnt < 12; tempCnt++) {
    		toneHSB[0] = this.pixelsMap[0][0].octave.tones[tempCnt].hue; 
    		tempIntRGB = Color.HSBtoRGB(toneHSB[0], toneHSB[1], toneHSB[2]);
    		tempColorObject = new Color(tempIntRGB);
    		this.colorsTonesInRGB[tempCnt][0] = (float) (tempColorObject.getRed()/255.0);
    		this.colorsTonesInRGB[tempCnt][1] = (float) (tempColorObject.getGreen()/255.0);
    		this.colorsTonesInRGB[tempCnt][2] = (float) (tempColorObject.getBlue()/255.0);
    	}
    }

    @Override
    public void update(Observable o, Object arg) {
        if ((arg != null) && ((arg == Chip2D.EVENT_SIZEX) || (arg == Chip2D.EVENT_SIZEY))) {
            initFilter();
        }
    }

    @Override
    public void initFilter() {
        allocateObjects(chip);
    }


    public class ringBuffer {
    	public int bufferSize;
        private float[] bufferValues = new float[this.bufferSize];
    	public int lastInsertedValueIndex;


    	public ringBuffer() {
    		this(5);
		}


    	public ringBuffer(int bufferSizeValue){
    		this.bufferSize = bufferSizeValue;
    		this.bufferValues = new float[this.bufferSize];
    		Arrays.fill(this.bufferValues, (float) 0.0); 
    		this.lastInsertedValueIndex = 0;
    	}

    	float get_bufferValues(int cnt){
    		return this.bufferValues[cnt];
    	}

    	float get_lastInsertedValue(){
    		return this.bufferValues[this.lastInsertedValueIndex];
    	}

    	void set_bufferValues(int cnt, float value){
    		bufferValues[cnt] = value;
    	}

    	void reset_bufferValues() {
            Arrays.fill(this.bufferValues, (float) 0.0);
            this.lastInsertedValueIndex = -1;
        }

    	void insertValue(float value){
    		if (this.lastInsertedValueIndex < (this.bufferSize-1)){
    			this.lastInsertedValueIndex++;
    		} else {
    			this.lastInsertedValueIndex = 0;
    		}
    		this.bufferValues[this.lastInsertedValueIndex] = value;
    	}

    	void removeLastInsertedValue(){
    		this.bufferValues[this.lastInsertedValueIndex] = (float) 0.0;
    		if (this.lastInsertedValueIndex > 0){
    			this.lastInsertedValueIndex--;
    		} else {
    			this.lastInsertedValueIndex = this.bufferSize - 1;
    		}

    	}
    }


    public class Tone {
        public float frequency;
        public String name; 
        public int index; 
        public float hue, saturation, brightness; 
        public Tone(){
        	this((float) 440.0, "A", 4, (float) 180.0, (float) 1.0, (float) 0.5);
        }


        public Tone(float f, String letter, int n, float hueValue) {
        	this(f, letter, n, hueValue, (float) 1.0, (float) 1.0);
        }


        public Tone(float f, String letter, int n, float hueValue, float satValue, float briValue) {
        	this.frequency = f;
            this.name = letter;
            this.index = n;
            this.hue = hueValue;
            this.saturation = satValue;
            this.brightness = briValue;
        }
    }

     public class Octave {
        public int index;

        private Tone[] tones;
    	private float[] tonesLowBoundaries;
        private float refFrequency;
        private float reason; 
        public Octave() { 
        	this(4);
        }

        public Octave(int indexValue) {

        	this.tones = new Tone[12];
        	this.tonesLowBoundaries = new float[this.tones.length];

        	this.index = indexValue;
        	this.refFrequency = (float) (Math.pow(2.0, this.index)*27.5); 
        	this.reason = (float) (Math.pow(2.0, 1.0/12.0));

        	this.tones[0]  = new Tone((float) Math.pow(this.reason, -9)*this.refFrequency, "C",  this.index, (float)   0.0/(float)360.0);
        	this.tones[1]  = new Tone((float) Math.pow(this.reason, -8)*this.refFrequency, "C#", this.index, (float)  30.0/(float)360.0);
        	this.tones[2]  = new Tone((float) Math.pow(this.reason, -7)*this.refFrequency, "D",  this.index, (float)  60.0/(float)360.0);
        	this.tones[3]  = new Tone((float) Math.pow(this.reason, -6)*this.refFrequency, "D#", this.index, (float)  90.0/(float)360.0);
        	this.tones[4]  = new Tone((float) Math.pow(this.reason, -5)*this.refFrequency, "E",  this.index, (float) 120.0/(float)360.0);
        	this.tones[5]  = new Tone((float) Math.pow(this.reason, -4)*this.refFrequency, "F",  this.index, (float) 150.0/(float)360.0);
        	this.tones[6]  = new Tone((float) Math.pow(this.reason, -3)*this.refFrequency, "F#", this.index, (float) 180.0/(float)360.0);
        	this.tones[7]  = new Tone((float) Math.pow(this.reason, -2)*this.refFrequency, "G",  this.index, (float) 210.0/(float)360.0);
        	this.tones[8]  = new Tone((float) Math.pow(this.reason, -1)*this.refFrequency, "G#", this.index, (float) 240.0/(float)360.0);
        	this.tones[9]  = new Tone(		 					   		this.refFrequency, "A",  this.index, (float) 270.0/(float)360.0);
        	this.tones[10] = new Tone((float)  Math.pow(this.reason, 1)*this.refFrequency, "A#", this.index, (float) 300.0/(float)360.0);
        	this.tones[11] = new Tone((float)  Math.pow(this.reason, 2)*this.refFrequency, "B",  this.index, (float) 330.0/(float)360.0);

        	for (int cnt = 0; cnt < 12; cnt++) {
        		this.tonesLowBoundaries[cnt] = (this.tones[cnt].frequency)/((float) Math.sqrt(this.reason));
        	}
        }

        Tone get_tones(int cnt){
        	return this.tones[cnt];
        }

        void set_tones(int cnt, Tone objectInstance){
        	this.tones[cnt] = objectInstance;
        }

        float get_tonesLowBoundaries(int cnt){
        	return this.tonesLowBoundaries[cnt];
        }

        void set_tonesLowBoundaries(int cnt, float value){
        	this.tonesLowBoundaries[cnt] = value;
        }
    }

    

    public class Pixel {

    	public int lastTimestamp; 
    	public float lastPatternPeriod;
    	public float averageFrequency;
    	public ringBuffer measuredFrequencies;
    	public boolean otherPolarityOccurred;
        public int highrank = 0;
    	public double highrankcount = 0;
    	public Octave octave;
    	public Tone presumedTone;
    	private float Correctness; 
    	private float SaturationCorrection; 
    	private int LongIntRGB;
    	private Color ColorObjectRGB;
    	private int xValue; 
    	private int yValue; 
    	float pixelTimestampUnit; 
    	float frequencyLowBoundary;
    	float frequencyHighBoundary;
    	private float[] pixelRGB;
    	private float[] pixelHSB;
    	private boolean displayActive;


    	public Pixel(){
    		this(5, (float) 1.0e-6, (float) 20.0, (float) 20.0e3);
    	}


    	public Pixel(int bufferSize){
    		this(bufferSize, (float) 1.0e-6, (float) 20.0, (float) 20.0e3);
    	}


    	public Pixel(int bufferSize, float timestampUnitValue, float lowFrequencyBoundaryValue, float highFrequencyBoundaryValue) {
    		this.lastTimestamp = 0;
    		this.lastPatternPeriod = (float) 0.0;
    		this.averageFrequency = (float) 0.0;
    		this.measuredFrequencies = new ringBuffer(bufferSize);
    		this.otherPolarityOccurred = false;
    		this.pixelTimestampUnit = timestampUnitValue;
    		this.frequencyLowBoundary = lowFrequencyBoundaryValue;
    		this.frequencyHighBoundary = highFrequencyBoundaryValue;
    		this.octave = new Octave((int) Math.ceil(Math.log(Math.sqrt(this.frequencyLowBoundary*this.frequencyHighBoundary)/27.5))); 
    		this.Correctness = (float) 1.0; 
    		this.pixelRGB = new float[3];
    		this.pixelHSB = new float[3];
    		this.pixelHSB[0] = this.presumedTone.hue;
    		this.pixelHSB[1] = this.presumedTone.saturation;
    		this.pixelHSB[2] = this.presumedTone.brightness; 
    		this.LongIntRGB  = Color.HSBtoRGB(this.pixelHSB[0], this.pixelHSB[1], this.pixelHSB[2]);
    		this.ColorObjectRGB = new Color(LongIntRGB);
    		this.displayActive = false;
    		this.pixelRGB[0] = (float) (this.ColorObjectRGB.getRed()/255.0);
    		this.pixelRGB[1] = (float) (this.ColorObjectRGB.getGreen()/255.0);
    		this.pixelRGB[2] = (float) (this.ColorObjectRGB.getBlue()/255.0);
    	}

    	float evaluateCorrectness(){ 
        	float correctnessValue = (float) 0.0;
    		if (this.averageFrequency <= this.presumedTone.frequency){
    			correctnessValue = this.averageFrequency / this.presumedTone.frequency;
    		} else {
    			correctnessValue = this.presumedTone.frequency / this.averageFrequency;
    		}
    		return correctnessValue;
    	}

    	void set_displayActive(boolean value){
    		this.displayActive = value;
    	}

    	boolean get_displayActive(){
    		return this.displayActive;
    	}

    	void set_Correctness(float value){
    		this.Correctness = value;
    	}

    	void set_Correctness(){
    		this.Correctness = this.evaluateCorrectness();
    	}

    	float get_Correctness(){
    		return this.Correctness;
    	}

    	float evaluateSaturationCorrection(){
    		this.set_Correctness();
    		final float slope = (float) 1.0;
    		final float intercept = (float) 0.0;
    		return (slope*this.Correctness) + intercept;
    	}

    	void set_saturationCorrection(float value){
    		this.SaturationCorrection = value;
    		this.pixelHSB[1] = this.SaturationCorrection;
    		this.LongIntRGB  = Color.HSBtoRGB(this.pixelHSB[0], this.pixelHSB[1], this.pixelHSB[2]);
    		this.ColorObjectRGB = new Color(LongIntRGB);
    		this.pixelRGB[0] = (float) (this.ColorObjectRGB.getRed()/255.0);
    		this.pixelRGB[1] = (float) (this.ColorObjectRGB.getGreen()/255.0);
    		this.pixelRGB[2] = (float) (this.ColorObjectRGB.getBlue()/255.0);
    	}

    	void set_saturationCorrection(){
    		float saturationCorrectionValue = this.evaluateSaturationCorrection();
    		this.set_saturationCorrection(saturationCorrectionValue);
    	}

    	float get_saturationCorrection(){
    		return this.SaturationCorrection;
    	}

    	int get_xValue(){
    		return this.xValue;
    	}

    	int get_yValue(){
    		return this.yValue;
    	}

    	float get_timestampValue(){
    		return this.lastTimestamp*this.pixelTimestampUnit;
    	}

    	void set_timestampValue(int value){
    		this.lastTimestamp = value;
    	}

    	void set_pixelRGB(float rValue, float gValue, float bValue){
    		this.pixelRGB[0] = rValue;
    		this.pixelRGB[1] = gValue;
    		this.pixelRGB[2] = bValue;
    	}
    }
}
